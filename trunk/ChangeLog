NoteEdit - a music score editor

version 2.9.0:
	* MusicXML import/export of arbitrary text is now supported. R272
	* Transposition now dependent on key signature, thanks to Csaba. R286
	* MusicXML import filter now places special barlines where it should. R292, R298, R323
	* MusicXML export filter now exports hidden rests like it should. R292
	* The last zoom factor gets set the next time you run NoteEdit. When a new file format arrives, each document should contain its own last zoom and position state. However, the default one (if no files loaded) should always be the last one used. R293
	* Verse expression is replaced by Stanza in Lyrics dialog. Translations updated as well. R294
	* Syntax characters < and > for multiple-sillables per single note aren't rendered on the screen anymore. R295
	* Prevent NoteEdit from crashing when calling New document when playing. R297
	* MusicXML import - fill with hidden rests in second staff as well. R299
	* Selection button and note buttons splitted. First step towards separate Insert/Edit/Selection modes. R300, R306
	* Don't select the next element when using Backspace to delete and the beginning of the score is reached. R301
	* New keyboard binding ESC - leaves current mode. Changed many keyboard bindings:
		- End -> E: Edit mode
		- Alt-Right, Alt-Left -> Home, End: Move at the beginning of the document, move at the end of document
		- Insert -> SHIFT+Return: Insert rest
		- CTRL+Backspace -> CTRL+Delete: Delete a note in chord
		- E -> SHIFT+E: Pitch E
	* Page layout editor no longer removes brace if placing a bracket around it. You're also no longer able to place a bracket on a single staff. R303
	* Updated bracket/brace layout and fixed some spacings. A new measureline connecting all the staffs at the beginning is now present. R304
	* Added CTRL+number_key bindings for selecting a voice number. If a key is hitted the second time, voice A is selected. Changed Key_QuoteLeft with Key_Apostrophe for placing a tie. R305
	* Added red border around the notePart when in Edit mode. R307
	* R306, R308-R311, R347 - Edit mode interface enhancments:
	  - Grace notes are now correctly chosen in Edit mode.
	  - Some code moved and optimized when updating elements in Edit mode.
	  - stateButtonChange(int state, int state2) -> updateInterface(int state, int state2, int length).
	  - slots for grace note buttons changed from setToTN8() -> setToGN8() and similar. Probably T was from "tiny", but musicians use an expression grace note for these kind of notes, so G.
	  - selectButton_ -> selectbutton_,
	  - setToSelect() -> setSelectMode(),
	  - some refresh stuff when switching between edit mode and select mode in various ways.
	* Hidden rest button now acts like others when in Edit mode and similar. But there's a major conflict between STAT_HIDDEN and STAT_CROSS. Problem is that 32 bits for status were already taken and there's no spare one for STAT_HIDDEN. I'll try to declare status_ to be 64 bit (long), so we'll have enough space for the future. An issue for the next commit. R312
	* R313, R320, R333:
	  - NMusElement::status_ is now unsigned 64bit integer. This way, hidden rests can have their unique flag and we have plenty of space for other flags in the future. NMusElement::status2_ is still unsigned int.
	  - status and status2 variables changed to status_type and unsigned throughout the code
	  - some internal renaming like state -> status, where state was the supposed 64bit integer
	  - introduction of new type status_type, which represents the 64bit integer type for status:
	    #define status_type unsigned long long
	    Problem with long long type is that only g++ knows it. If we're going to port it to another compiler, something like this should be correct:
		#ifdef MSVC++
		#define status_type __uint64
		#elif defined (G++)
		#define status_type unsigned long long
		#endif
	  - changed necessary int and/or char kind; in keysignature operations to status_type kind;
	  - whenever doing anything with STAT_* from now on (any comparison, bitmask operations and similar), always use status_type for operating type! int and other smaller types are not usable anymore!
	  - int length_before_edit_ was introduced, because status_before_edit_ isn't appropriate anymore, to contain the length of the last selected note as well.
	  - removed note_dymmy_ as it's not needed anymore IMO
	* R325 - LilyPond export filter enhancments:
	  - LilyPond export filter successfully tested with version 2.6.3 and 2.4.5
	  - Ritardando and Accellerando now printed in italic and below the staff by default
	  - Arbitrary text is not printed in bold anymore, because it's too aggressive. It's only \large and it's for the whole text (not just the first word).
	  - noteedit -> NoteEdit
	  - if Lily26 is found, utf8 encoding is set by default
	* R330:
	  - score property "last author" is exported as arranger
	  - instead of a layout block we do a paper block: composer is properly aligned with music
	* Slur direction is now dependent on voice stem direction + voice stem
	policy. For eg. slurs for voices in poliphony music (2 voices, 1st has stems up, 2nd has stems down) are at the same side as stems, whereas for single voice staff without poliphony, slurs are at the opposite side. Also, every note (class NChord) has a new private NVoice *voice_ variable which defines which voice does this note/chord belong to. R333, R334
	* Implemented standard paper sizes (a6, a5, a4, a3, letter, tabloid, legal) in Lilypond export filter and updated export dialog. R336
	* Many aestetic bugs fixed (not unified capital letters, nicer expressions) in UI. Updated Slovenian translation. R348
	* Fixed bug #4437 - NoteEdit crashes in auto scroll when playing:
	  Fixed crash when turning the page and try to show the current clef. If the clef wasn't placed at all, NoteEdit crashed. Thanks to bensonkao for hunting it down and the idea how to fix it.
